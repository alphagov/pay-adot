receivers:
  prometheus:
    config:
      global:
        scrape_interval: 30s
        scrape_timeout: 10s
      scrape_configs:
      - job_name: "adot-sidecar-scrape-application"
        static_configs:
        - targets: [ "127.0.0.1:$APPLICATION_PORT" ]
        honor_labels: true
        honor_timestamps: true
  awsecscontainermetrics:
    collection_interval: 30s

processors:
  resourcedetection/env:
    detectors: [env]
    timeout: 2s
    override: true

  resourcedetection/ecs:
    detectors: [ecs]
    timeout: 2s
    override: true

  filter:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - .*memory.reserved
          - .*memory.utilized
          - .*cpu.reserved
          - .*cpu.utilized
          - .*network.rate.rx
          - .*network.rate.tx
  metricstransform:
    transforms:
      - include: ecs.task.memory.utilized
        action: update
        new_name: MemoryUtilized
      - include: ecs.task.memory.reserved
        action: update
        new_name: MemoryReserved
      - include: ecs.task.cpu.utilized
        action: update
        new_name: CpuUtilized
      - include: ecs.task.cpu.reserved
        action: update
        new_name: CpuReserved
      - include: ecs.task.network.rate.rx
        action: update
        new_name: NetworkRxBytes
      - include: ecs.task.network.rate.tx
        action: update
        new_name: NetworkTxBytes
  resource:
    attributes:
      - key: ClusterName
        from_attribute: aws.ecs.cluster.name
        action: insert
      - key: aws.ecs.cluster.name
        action: delete
      - key: ServiceName
        from_attribute: aws.ecs.service.name
        action: insert
      - key: aws.ecs.service.name
        action: delete
      - key: TaskId
        from_attribute: aws.ecs.task.id
        action: insert
      - key: aws.ecs.task.id
        action: delete
      - key: TaskDefinitionFamily
        from_attribute: aws.ecs.task.family
        action: insert
      - key: aws.ecs.task.family
        action: delete
      - key: ContainerName
        from_attribute: container.name
        action: insert
      - key: container.name
        action: delete

exporters:
  prometheusremotewrite:
    endpoint: $PROMETHEUS_ENDPOINT_URL
    # We do not want to cause a mass discontinuity in all out existing metrics, so disable the new behaviour
    # which adds suffixes with the metrics type.
    add_metric_suffixes: false
    resource_to_telemetry_conversion:
        enabled: true
    auth:
      authenticator: sigv4auth
  logging:
    verbosity: normal # 'detailed' to debug
  awsemf:
    namespace: ECS/ContainerInsights
    log_group_name:  '/aws/ecs/containerinsights/{ClusterName}/performance'
    log_stream_name: '{TaskId}'
    resource_to_telemetry_conversion:
      enabled: true
    dimension_rollup_option: NoDimensionRollup
    metric_declarations:
      - dimensions: [[ClusterName], [ClusterName, TaskDefinitionFamily]]
        metric_name_selectors: 
          - MemoryUtilized 
          - MemoryReserved 
          - CpuUtilized
          - CpuReserved
      - dimensions: [[ClusterName], [ClusterName, TaskDefinitionFamily, ContainerName]]
        metric_name_selectors: 
          - MemoryUtilized 
          - MemoryReserved 
          - CpuUtilized
          - CpuReserved
          - container.*

extensions:
  sigv4auth:
    region: $AWS_REGION
    service: aps
    assume_role:
      arn: $PROMETHEUS_WRITE_ASSUME_ROLE_ARN

service:
  telemetry:
    logs:
      level: $OTEL_LOG_LEVEL
    metrics:
      level: none
  extensions: [sigv4auth]
  pipelines:
    metrics/application:
      receivers:
        - prometheus
      processors:
        - resourcedetection/env
        - resourcedetection/ecs
        - resource/rename
      exporters:
        - logging
        - prometheusremotewrite
    metrics:
      receivers: 
        - awsecscontainermetrics
      processors: 
        - filter
        - metricstransform
        - resource
      exporters: 
        - awsemf
